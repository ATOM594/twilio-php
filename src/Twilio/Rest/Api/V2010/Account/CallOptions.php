<?php
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Options;
use Twilio\Values;


abstract class CallOptions {
    /**
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60; parameter&#39;s value. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted). 
    * @param string[] $statusCallbackEvent The call progress events that we will send to the &#x60;status_callback&#x60; URL. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. If no event is specified, we send the &#x60;completed&#x60; status. If you want to receive multiple events, specify each one in a separate &#x60;status_callback_event&#x60; parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample&#x3D;code-create-a-call-resource-and-specify-a-statuscallbackevent&amp;code-sdk-version&#x3D;json). If an &#x60;application_sid&#x60; is present, this parameter is ignored. 
    * @param string $statusCallbackMethod The HTTP method we should use when calling the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $sendDigits A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (&#x60;0&#x60;-&#x60;9&#x60;), &#39;&#x60;#&#x60;&#39;, &#39;&#x60;*&#x60;&#39; and &#39;&#x60;w&#x60;&#39;, to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be &#x60;ww1234#&#x60;. Remember to URL-encode this string, since the &#39;&#x60;#&#x60;&#39; character has special meaning in a URL. If both &#x60;SendDigits&#x60; and &#x60;MachineDetection&#x60; parameters are provided, then &#x60;MachineDetection&#x60; will be ignored. 
    * @param int $timeout The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is &#x60;60&#x60; seconds and the maximum is &#x60;600&#x60; seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as &#x60;15&#x60; seconds, to hang up before reaching an answering machine or voicemail. 
    * @param bool $record Whether to record the call. Can be &#x60;true&#x60; to record the phone call, or &#x60;false&#x60; to not. The default is &#x60;false&#x60;. The &#x60;recording_url&#x60; is sent to the &#x60;status_callback&#x60; URL. 
    * @param string $recordingChannels The number of channels in the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60;. The default is &#x60;mono&#x60;. &#x60;mono&#x60; records both legs of the call in a single channel of the recording file. &#x60;dual&#x60; records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call. 
    * @param string $recordingStatusCallback The URL that we call when the recording is available to be accessed. 
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when calling the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. 
    * @param string $sipAuthUsername The username used to authenticate the caller making a SIP call. 
    * @param string $sipAuthPassword The password required to authenticate the user account specified in &#x60;sip_auth_username&#x60;. 
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). 
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. 
    * @param string[] $recordingStatusCallbackEvent The recording status events that will trigger calls to the URL specified in &#x60;recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60;. Defaults to &#x60;completed&#x60;. Separate  multiple values with a space. 
    * @param string $trim Whether to trim any leading and trailing silence from the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;. 
    * @param string $callerId The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as &#x60;name@company.com&#x60;. 
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. 
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. 
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. 
    * @param string $asyncAmd Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: &#x60;true&#x60; or &#x60;false&#x60;. 
    * @param string $asyncAmdStatusCallback The URL that we should call using the &#x60;async_amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. 
    * @param string $asyncAmdStatusCallbackMethod The HTTP method we should use when calling the &#x60;async_amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. 
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) 
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) 
    * @param string $callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call. 
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio. 
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. 
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls). 
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both &#x60;twiml&#x60; and &#x60;url&#x60; are provided then &#x60;twiml&#x60; parameter will be ignored. Max 4000 characters. 
    * @param string $applicationSid The SID of the Application resource that will handle the call, if the call will be handled by an application. 
    * @return CreateCallOptions Options builder
    */
    public static function create(string  $method=Values::NONE,string  $fallbackUrl=Values::NONE,string  $fallbackMethod=Values::NONE,string  $statusCallback=Values::NONE,array  $statusCallbackEvent=Values::ARRAY_NONE,string  $statusCallbackMethod=Values::NONE,string  $sendDigits=Values::NONE,int  $timeout=Values::NONE,bool  $record=Values::NONE,string  $recordingChannels=Values::NONE,string  $recordingStatusCallback=Values::NONE,string  $recordingStatusCallbackMethod=Values::NONE,string  $sipAuthUsername=Values::NONE,string  $sipAuthPassword=Values::NONE,string  $machineDetection=Values::NONE,int  $machineDetectionTimeout=Values::NONE,array  $recordingStatusCallbackEvent=Values::ARRAY_NONE,string  $trim=Values::NONE,string  $callerId=Values::NONE,int  $machineDetectionSpeechThreshold=Values::NONE,int  $machineDetectionSpeechEndThreshold=Values::NONE,int  $machineDetectionSilenceTimeout=Values::NONE,string  $asyncAmd=Values::NONE,string  $asyncAmdStatusCallback=Values::NONE,string  $asyncAmdStatusCallbackMethod=Values::NONE,string  $byoc=Values::NONE,string  $callReason=Values::NONE,string  $callToken=Values::NONE,string  $recordingTrack=Values::NONE,int  $timeLimit=Values::NONE,string  $url=Values::NONE,string  $twiml=Values::NONE,string  $applicationSid=Values::NONE): CreateCallOptions {
        return new CreateCallOptions($method,$fallbackUrl,$fallbackMethod,$statusCallback,$statusCallbackEvent,$statusCallbackMethod,$sendDigits,$timeout,$record,$recordingChannels,$recordingStatusCallback,$recordingStatusCallbackMethod,$sipAuthUsername,$sipAuthPassword,$machineDetection,$machineDetectionTimeout,$recordingStatusCallbackEvent,$trim,$callerId,$machineDetectionSpeechThreshold,$machineDetectionSpeechEndThreshold,$machineDetectionSilenceTimeout,$asyncAmd,$asyncAmdStatusCallback,$asyncAmdStatusCallbackMethod,$byoc,$callReason,$callToken,$recordingTrack,$timeLimit,$url,$twiml,$applicationSid);
    }



    /**
    * @param string $to Only show calls made to this phone number, SIP address, Client identifier or SIM SID. 
    * @param string $from Only include calls from this phone number, SIP address, Client identifier or SIM SID. 
    * @param string $parentCallSid Only include calls spawned by calls with this SID. 
    * @param string $status The status of the calls to include. Can be: &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;in-progress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;no-answer&#x60;. 
    * @param \DateTime $startTime Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date. 
    * @param \DateTime $startTimeBefore Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date. 
    * @param \DateTime $startTimeAfter Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date. 
    * @param \DateTime $endTime Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date. 
    * @param \DateTime $endTimeBefore Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date. 
    * @param \DateTime $endTimeAfter Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date. 
    * @return ReadCallOptions Options builder
    */
    public static function read(string  $to=Values::NONE,string  $from=Values::NONE,string  $parentCallSid=Values::NONE,string  $status=Values::NONE,\DateTime  $startTime=Values::NONE,\DateTime  $startTimeBefore=Values::NONE,\DateTime  $startTimeAfter=Values::NONE,\DateTime  $endTime=Values::NONE,\DateTime  $endTimeBefore=Values::NONE,\DateTime  $endTimeAfter=Values::NONE): ReadCallOptions {
        return new ReadCallOptions($to,$from,$parentCallSid,$status,$startTime,$startTimeBefore,$startTimeAfter,$endTime,$endTimeBefore,$endTimeAfter);
    }

    /**
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls). 
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $status  
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted). 
    * @param string $statusCallbackMethod The HTTP method we should use when requesting the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. 
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive 
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. 
    * @return UpdateCallOptions Options builder
    */
    public static function update(string  $url=Values::NONE,string  $method=Values::NONE,string  $status=Values::NONE,string  $fallbackUrl=Values::NONE,string  $fallbackMethod=Values::NONE,string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,string  $twiml=Values::NONE,int  $timeLimit=Values::NONE): UpdateCallOptions {
        return new UpdateCallOptions($url,$method,$status,$fallbackUrl,$fallbackMethod,$statusCallback,$statusCallbackMethod,$twiml,$timeLimit);
    }

}

class CreateCallOptions extends Options {
    /**
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60; parameter&#39;s value. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    * @param string[] $statusCallbackEvent The call progress events that we will send to the &#x60;status_callback&#x60; URL. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. If no event is specified, we send the &#x60;completed&#x60; status. If you want to receive multiple events, specify each one in a separate &#x60;status_callback_event&#x60; parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample&#x3D;code-create-a-call-resource-and-specify-a-statuscallbackevent&amp;code-sdk-version&#x3D;json). If an &#x60;application_sid&#x60; is present, this parameter is ignored.
    * @param string $statusCallbackMethod The HTTP method we should use when calling the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $sendDigits A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (&#x60;0&#x60;-&#x60;9&#x60;), &#39;&#x60;#&#x60;&#39;, &#39;&#x60;*&#x60;&#39; and &#39;&#x60;w&#x60;&#39;, to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be &#x60;ww1234#&#x60;. Remember to URL-encode this string, since the &#39;&#x60;#&#x60;&#39; character has special meaning in a URL. If both &#x60;SendDigits&#x60; and &#x60;MachineDetection&#x60; parameters are provided, then &#x60;MachineDetection&#x60; will be ignored.
    * @param int $timeout The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is &#x60;60&#x60; seconds and the maximum is &#x60;600&#x60; seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as &#x60;15&#x60; seconds, to hang up before reaching an answering machine or voicemail.
    * @param bool $record Whether to record the call. Can be &#x60;true&#x60; to record the phone call, or &#x60;false&#x60; to not. The default is &#x60;false&#x60;. The &#x60;recording_url&#x60; is sent to the &#x60;status_callback&#x60; URL.
    * @param string $recordingChannels The number of channels in the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60;. The default is &#x60;mono&#x60;. &#x60;mono&#x60; records both legs of the call in a single channel of the recording file. &#x60;dual&#x60; records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    * @param string $recordingStatusCallback The URL that we call when the recording is available to be accessed.
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when calling the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    * @param string $sipAuthUsername The username used to authenticate the caller making a SIP call.
    * @param string $sipAuthPassword The password required to authenticate the user account specified in &#x60;sip_auth_username&#x60;.
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds.
    * @param string[] $recordingStatusCallbackEvent The recording status events that will trigger calls to the URL specified in &#x60;recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60;. Defaults to &#x60;completed&#x60;. Separate  multiple values with a space.
    * @param string $trim Whether to trim any leading and trailing silence from the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;.
    * @param string $callerId The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as &#x60;name@company.com&#x60;.
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    * @param string $asyncAmd Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @param string $asyncAmdStatusCallback The URL that we should call using the &#x60;async_amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax.
    * @param string $asyncAmdStatusCallbackMethod The HTTP method we should use when calling the &#x60;async_amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta)
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta)
    * @param string $callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio.
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both &#x60;twiml&#x60; and &#x60;url&#x60; are provided then &#x60;twiml&#x60; parameter will be ignored. Max 4000 characters.
    * @param string $applicationSid The SID of the Application resource that will handle the call, if the call will be handled by an application.
    */
    public function __construct(string  $method=Values::NONE,string  $fallbackUrl=Values::NONE,string  $fallbackMethod=Values::NONE,string  $statusCallback=Values::NONE,array  $statusCallbackEvent=Values::ARRAY_NONE,string  $statusCallbackMethod=Values::NONE,string  $sendDigits=Values::NONE,int  $timeout=Values::NONE,bool  $record=Values::NONE,string  $recordingChannels=Values::NONE,string  $recordingStatusCallback=Values::NONE,string  $recordingStatusCallbackMethod=Values::NONE,string  $sipAuthUsername=Values::NONE,string  $sipAuthPassword=Values::NONE,string  $machineDetection=Values::NONE,int  $machineDetectionTimeout=Values::NONE,array  $recordingStatusCallbackEvent=Values::ARRAY_NONE,string  $trim=Values::NONE,string  $callerId=Values::NONE,int  $machineDetectionSpeechThreshold=Values::NONE,int  $machineDetectionSpeechEndThreshold=Values::NONE,int  $machineDetectionSilenceTimeout=Values::NONE,string  $asyncAmd=Values::NONE,string  $asyncAmdStatusCallback=Values::NONE,string  $asyncAmdStatusCallbackMethod=Values::NONE,string  $byoc=Values::NONE,string  $callReason=Values::NONE,string  $callToken=Values::NONE,string  $recordingTrack=Values::NONE,int  $timeLimit=Values::NONE,string  $url=Values::NONE,string  $twiml=Values::NONE,string  $applicationSid=Values::NONE) {
        $this->options['method'] = $method;
        $this->options['fallbackUrl'] = $fallbackUrl;
        $this->options['fallbackMethod'] = $fallbackMethod;
        $this->options['statusCallback'] = $statusCallback;
        $this->options['statusCallbackEvent'] = $statusCallbackEvent;
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        $this->options['sendDigits'] = $sendDigits;
        $this->options['timeout'] = $timeout;
        $this->options['record'] = $record;
        $this->options['recordingChannels'] = $recordingChannels;
        $this->options['recordingStatusCallback'] = $recordingStatusCallback;
        $this->options['recordingStatusCallbackMethod'] = $recordingStatusCallbackMethod;
        $this->options['sipAuthUsername'] = $sipAuthUsername;
        $this->options['sipAuthPassword'] = $sipAuthPassword;
        $this->options['machineDetection'] = $machineDetection;
        $this->options['machineDetectionTimeout'] = $machineDetectionTimeout;
        $this->options['recordingStatusCallbackEvent'] = $recordingStatusCallbackEvent;
        $this->options['trim'] = $trim;
        $this->options['callerId'] = $callerId;
        $this->options['machineDetectionSpeechThreshold'] = $machineDetectionSpeechThreshold;
        $this->options['machineDetectionSpeechEndThreshold'] = $machineDetectionSpeechEndThreshold;
        $this->options['machineDetectionSilenceTimeout'] = $machineDetectionSilenceTimeout;
        $this->options['asyncAmd'] = $asyncAmd;
        $this->options['asyncAmdStatusCallback'] = $asyncAmdStatusCallback;
        $this->options['asyncAmdStatusCallbackMethod'] = $asyncAmdStatusCallbackMethod;
        $this->options['byoc'] = $byoc;
        $this->options['callReason'] = $callReason;
        $this->options['callToken'] = $callToken;
        $this->options['recordingTrack'] = $recordingTrack;
        $this->options['timeLimit'] = $timeLimit;
        $this->options['url'] = $url;
        $this->options['twiml'] = $twiml;
        $this->options['applicationSid'] = $applicationSid;
    }

    /**
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60; parameter&#39;s value. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setMethod(string $method): self {
        $this->options['method'] = $method;
        return $this;
    }
    /**
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setFallbackUrl(string $fallbackUrl): self {
        $this->options['fallbackUrl'] = $fallbackUrl;
        return $this;
    }
    /**
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setFallbackMethod(string $fallbackMethod): self {
        $this->options['fallbackMethod'] = $fallbackMethod;
        return $this;
    }
    /**
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    * @return $this Fluent Builder
    */
    public function setStatusCallback(string $statusCallback): self {
        $this->options['statusCallback'] = $statusCallback;
        return $this;
    }
    /**
    * @param string[] $statusCallbackEvent The call progress events that we will send to the &#x60;status_callback&#x60; URL. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. If no event is specified, we send the &#x60;completed&#x60; status. If you want to receive multiple events, specify each one in a separate &#x60;status_callback_event&#x60; parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample&#x3D;code-create-a-call-resource-and-specify-a-statuscallbackevent&amp;code-sdk-version&#x3D;json). If an &#x60;application_sid&#x60; is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackEvent(array $statusCallbackEvent): self {
        $this->options['statusCallbackEvent'] = $statusCallbackEvent;
        return $this;
    }
    /**
    * @param string $statusCallbackMethod The HTTP method we should use when calling the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackMethod(string $statusCallbackMethod): self {
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        return $this;
    }
    /**
    * @param string $sendDigits A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (&#x60;0&#x60;-&#x60;9&#x60;), &#39;&#x60;#&#x60;&#39;, &#39;&#x60;*&#x60;&#39; and &#39;&#x60;w&#x60;&#39;, to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be &#x60;ww1234#&#x60;. Remember to URL-encode this string, since the &#39;&#x60;#&#x60;&#39; character has special meaning in a URL. If both &#x60;SendDigits&#x60; and &#x60;MachineDetection&#x60; parameters are provided, then &#x60;MachineDetection&#x60; will be ignored.
    * @return $this Fluent Builder
    */
    public function setSendDigits(string $sendDigits): self {
        $this->options['sendDigits'] = $sendDigits;
        return $this;
    }
    /**
    * @param int $timeout The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is &#x60;60&#x60; seconds and the maximum is &#x60;600&#x60; seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as &#x60;15&#x60; seconds, to hang up before reaching an answering machine or voicemail.
    * @return $this Fluent Builder
    */
    public function setTimeout(int $timeout): self {
        $this->options['timeout'] = $timeout;
        return $this;
    }
    /**
    * @param bool $record Whether to record the call. Can be &#x60;true&#x60; to record the phone call, or &#x60;false&#x60; to not. The default is &#x60;false&#x60;. The &#x60;recording_url&#x60; is sent to the &#x60;status_callback&#x60; URL.
    * @return $this Fluent Builder
    */
    public function setRecord(bool $record): self {
        $this->options['record'] = $record;
        return $this;
    }
    /**
    * @param string $recordingChannels The number of channels in the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60;. The default is &#x60;mono&#x60;. &#x60;mono&#x60; records both legs of the call in a single channel of the recording file. &#x60;dual&#x60; records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    * @return $this Fluent Builder
    */
    public function setRecordingChannels(string $recordingChannels): self {
        $this->options['recordingChannels'] = $recordingChannels;
        return $this;
    }
    /**
    * @param string $recordingStatusCallback The URL that we call when the recording is available to be accessed.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallback(string $recordingStatusCallback): self {
        $this->options['recordingStatusCallback'] = $recordingStatusCallback;
        return $this;
    }
    /**
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when calling the &#x60;recording_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallbackMethod(string $recordingStatusCallbackMethod): self {
        $this->options['recordingStatusCallbackMethod'] = $recordingStatusCallbackMethod;
        return $this;
    }
    /**
    * @param string $sipAuthUsername The username used to authenticate the caller making a SIP call.
    * @return $this Fluent Builder
    */
    public function setSipAuthUsername(string $sipAuthUsername): self {
        $this->options['sipAuthUsername'] = $sipAuthUsername;
        return $this;
    }
    /**
    * @param string $sipAuthPassword The password required to authenticate the user account specified in &#x60;sip_auth_username&#x60;.
    * @return $this Fluent Builder
    */
    public function setSipAuthPassword(string $sipAuthPassword): self {
        $this->options['sipAuthPassword'] = $sipAuthPassword;
        return $this;
    }
    /**
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    * @return $this Fluent Builder
    */
    public function setMachineDetection(string $machineDetection): self {
        $this->options['machineDetection'] = $machineDetection;
        return $this;
    }
    /**
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionTimeout(int $machineDetectionTimeout): self {
        $this->options['machineDetectionTimeout'] = $machineDetectionTimeout;
        return $this;
    }
    /**
    * @param string[] $recordingStatusCallbackEvent The recording status events that will trigger calls to the URL specified in &#x60;recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60; and &#x60;absent&#x60;. Defaults to &#x60;completed&#x60;. Separate  multiple values with a space.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallbackEvent(array $recordingStatusCallbackEvent): self {
        $this->options['recordingStatusCallbackEvent'] = $recordingStatusCallbackEvent;
        return $this;
    }
    /**
    * @param string $trim Whether to trim any leading and trailing silence from the recording. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and the default is &#x60;trim-silence&#x60;.
    * @return $this Fluent Builder
    */
    public function setTrim(string $trim): self {
        $this->options['trim'] = $trim;
        return $this;
    }
    /**
    * @param string $callerId The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as &#x60;name@company.com&#x60;.
    * @return $this Fluent Builder
    */
    public function setCallerId(string $callerId): self {
        $this->options['callerId'] = $callerId;
        return $this;
    }
    /**
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSpeechThreshold(int $machineDetectionSpeechThreshold): self {
        $this->options['machineDetectionSpeechThreshold'] = $machineDetectionSpeechThreshold;
        return $this;
    }
    /**
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSpeechEndThreshold(int $machineDetectionSpeechEndThreshold): self {
        $this->options['machineDetectionSpeechEndThreshold'] = $machineDetectionSpeechEndThreshold;
        return $this;
    }
    /**
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSilenceTimeout(int $machineDetectionSilenceTimeout): self {
        $this->options['machineDetectionSilenceTimeout'] = $machineDetectionSilenceTimeout;
        return $this;
    }
    /**
    * @param string $asyncAmd Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setAsyncAmd(string $asyncAmd): self {
        $this->options['asyncAmd'] = $asyncAmd;
        return $this;
    }
    /**
    * @param string $asyncAmdStatusCallback The URL that we should call using the &#x60;async_amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax.
    * @return $this Fluent Builder
    */
    public function setAsyncAmdStatusCallback(string $asyncAmdStatusCallback): self {
        $this->options['asyncAmdStatusCallback'] = $asyncAmdStatusCallback;
        return $this;
    }
    /**
    * @param string $asyncAmdStatusCallbackMethod The HTTP method we should use when calling the &#x60;async_amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setAsyncAmdStatusCallbackMethod(string $asyncAmdStatusCallbackMethod): self {
        $this->options['asyncAmdStatusCallbackMethod'] = $asyncAmdStatusCallbackMethod;
        return $this;
    }
    /**
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta)
    * @return $this Fluent Builder
    */
    public function setByoc(string $byoc): self {
        $this->options['byoc'] = $byoc;
        return $this;
    }
    /**
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta)
    * @return $this Fluent Builder
    */
    public function setCallReason(string $callReason): self {
        $this->options['callReason'] = $callReason;
        return $this;
    }
    /**
    * @param string $callToken A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call&#39;s call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    * @return $this Fluent Builder
    */
    public function setCallToken(string $callToken): self {
        $this->options['callToken'] = $callToken;
        return $this;
    }
    /**
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is generated from Twilio. &#x60;both&#x60; records the audio that is received and generated by Twilio.
    * @return $this Fluent Builder
    */
    public function setRecordingTrack(string $recordingTrack): self {
        $this->options['recordingTrack'] = $recordingTrack;
        return $this;
    }
    /**
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    * @return $this Fluent Builder
    */
    public function setTimeLimit(int $timeLimit): self {
        $this->options['timeLimit'] = $timeLimit;
        return $this;
    }
    /**
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    * @return $this Fluent Builder
    */
    public function setUrl(string $url): self {
        $this->options['url'] = $url;
        return $this;
    }
    /**
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both &#x60;twiml&#x60; and &#x60;url&#x60; are provided then &#x60;twiml&#x60; parameter will be ignored. Max 4000 characters.
    * @return $this Fluent Builder
    */
    public function setTwiml(string $twiml): self {
        $this->options['twiml'] = $twiml;
        return $this;
    }
    /**
    * @param string $applicationSid The SID of the Application resource that will handle the call, if the call will be handled by an application.
    * @return $this Fluent Builder
    */
    public function setApplicationSid(string $applicationSid): self {
        $this->options['applicationSid'] = $applicationSid;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.CreateCallOptions ' . $options . ']';
    }
}



class ReadCallOptions extends Options {
    /**
    * @param string $to Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    * @param string $from Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    * @param string $parentCallSid Only include calls spawned by calls with this SID.
    * @param string $status The status of the calls to include. Can be: &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;in-progress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;no-answer&#x60;.
    * @param \DateTime $startTime Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @param \DateTime $startTimeBefore Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @param \DateTime $startTimeAfter Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @param \DateTime $endTime Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    * @param \DateTime $endTimeBefore Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    * @param \DateTime $endTimeAfter Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    */
    public function __construct(string  $to=Values::NONE,string  $from=Values::NONE,string  $parentCallSid=Values::NONE,string  $status=Values::NONE,\DateTime  $startTime=Values::NONE,\DateTime  $startTimeBefore=Values::NONE,\DateTime  $startTimeAfter=Values::NONE,\DateTime  $endTime=Values::NONE,\DateTime  $endTimeBefore=Values::NONE,\DateTime  $endTimeAfter=Values::NONE) {
        $this->options['to'] = $to;
        $this->options['from'] = $from;
        $this->options['parentCallSid'] = $parentCallSid;
        $this->options['status'] = $status;
        $this->options['startTime'] = $startTime;
        $this->options['startTimeBefore'] = $startTimeBefore;
        $this->options['startTimeAfter'] = $startTimeAfter;
        $this->options['endTime'] = $endTime;
        $this->options['endTimeBefore'] = $endTimeBefore;
        $this->options['endTimeAfter'] = $endTimeAfter;
    }

    /**
    * @param string $to Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    * @return $this Fluent Builder
    */
    public function setTo(string $to): self {
        $this->options['to'] = $to;
        return $this;
    }
    /**
    * @param string $from Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    * @return $this Fluent Builder
    */
    public function setFrom(string $from): self {
        $this->options['from'] = $from;
        return $this;
    }
    /**
    * @param string $parentCallSid Only include calls spawned by calls with this SID.
    * @return $this Fluent Builder
    */
    public function setParentCallSid(string $parentCallSid): self {
        $this->options['parentCallSid'] = $parentCallSid;
        return $this;
    }
    /**
    * @param string $status The status of the calls to include. Can be: &#x60;queued&#x60;, &#x60;ringing&#x60;, &#x60;in-progress&#x60;, &#x60;canceled&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, &#x60;busy&#x60;, or &#x60;no-answer&#x60;.
    * @return $this Fluent Builder
    */
    public function setStatus(string $status): self {
        $this->options['status'] = $status;
        return $this;
    }
    /**
    * @param \DateTime $startTime Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setStartTime(\DateTime $startTime): self {
        $this->options['startTime'] = $startTime;
        return $this;
    }
    /**
    * @param \DateTime $startTimeBefore Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setStartTimeBefore(\DateTime $startTimeBefore): self {
        $this->options['startTimeBefore'] = $startTimeBefore;
        return $this;
    }
    /**
    * @param \DateTime $startTimeAfter Only include calls that started on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that started on this date. You can also specify an inequality, such as &#x60;StartTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that started on or before midnight of this date, and &#x60;StartTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that started on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setStartTimeAfter(\DateTime $startTimeAfter): self {
        $this->options['startTimeAfter'] = $startTimeAfter;
        return $this;
    }
    /**
    * @param \DateTime $endTime Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setEndTime(\DateTime $endTime): self {
        $this->options['endTime'] = $endTime;
        return $this;
    }
    /**
    * @param \DateTime $endTimeBefore Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setEndTimeBefore(\DateTime $endTimeBefore): self {
        $this->options['endTimeBefore'] = $endTimeBefore;
        return $this;
    }
    /**
    * @param \DateTime $endTimeAfter Only include calls that ended on this date. Specify a date as &#x60;YYYY-MM-DD&#x60; in GMT, for example: &#x60;2009-07-06&#x60;, to read only calls that ended on this date. You can also specify an inequality, such as &#x60;EndTime&lt;&#x3D;YYYY-MM-DD&#x60;, to read calls that ended on or before midnight of this date, and &#x60;EndTime&gt;&#x3D;YYYY-MM-DD&#x60; to read calls that ended on or after midnight of this date.
    * @return $this Fluent Builder
    */
    public function setEndTimeAfter(\DateTime $endTimeAfter): self {
        $this->options['endTimeAfter'] = $endTimeAfter;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.ReadCallOptions ' . $options . ']';
    }
}

class UpdateCallOptions extends Options {
    /**
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $status 
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    * @param string $statusCallbackMethod The HTTP method we should use when requesting the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    */
    public function __construct(string  $url=Values::NONE,string  $method=Values::NONE,string  $status=Values::NONE,string  $fallbackUrl=Values::NONE,string  $fallbackMethod=Values::NONE,string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,string  $twiml=Values::NONE,int  $timeLimit=Values::NONE) {
        $this->options['url'] = $url;
        $this->options['method'] = $method;
        $this->options['status'] = $status;
        $this->options['fallbackUrl'] = $fallbackUrl;
        $this->options['fallbackMethod'] = $fallbackMethod;
        $this->options['statusCallback'] = $statusCallback;
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        $this->options['twiml'] = $twiml;
        $this->options['timeLimit'] = $timeLimit;
    }

    /**
    * @param string $url The absolute URL that returns the TwiML instructions for the call. We will call this URL using the &#x60;method&#x60; when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    * @return $this Fluent Builder
    */
    public function setUrl(string $url): self {
        $this->options['url'] = $url;
        return $this;
    }
    /**
    * @param string $method The HTTP method we should use when calling the &#x60;url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setMethod(string $method): self {
        $this->options['method'] = $method;
        return $this;
    }
    /**
    * @param string $status 
    * @return $this Fluent Builder
    */
    public function setStatus(string $status): self {
        $this->options['status'] = $status;
        return $this;
    }
    /**
    * @param string $fallbackUrl The URL that we call using the &#x60;fallback_method&#x60; if an error occurs when requesting or executing the TwiML at &#x60;url&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setFallbackUrl(string $fallbackUrl): self {
        $this->options['fallbackUrl'] = $fallbackUrl;
        return $this;
    }
    /**
    * @param string $fallbackMethod The HTTP method that we should use to request the &#x60;fallback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setFallbackMethod(string $fallbackMethod): self {
        $this->options['fallbackMethod'] = $fallbackMethod;
        return $this;
    }
    /**
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. If no &#x60;status_callback_event&#x60; is specified, we will send the &#x60;completed&#x60; status. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    * @return $this Fluent Builder
    */
    public function setStatusCallback(string $statusCallback): self {
        $this->options['statusCallback'] = $statusCallback;
        return $this;
    }
    /**
    * @param string $statusCallbackMethod The HTTP method we should use when requesting the &#x60;status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. If an &#x60;application_sid&#x60; parameter is present, this parameter is ignored.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackMethod(string $statusCallbackMethod): self {
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        return $this;
    }
    /**
    * @param string $twiml TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    * @return $this Fluent Builder
    */
    public function setTwiml(string $twiml): self {
        $this->options['twiml'] = $twiml;
        return $this;
    }
    /**
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    * @return $this Fluent Builder
    */
    public function setTimeLimit(int $timeLimit): self {
        $this->options['timeLimit'] = $timeLimit;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.UpdateCallOptions ' . $options . ']';
    }
}

