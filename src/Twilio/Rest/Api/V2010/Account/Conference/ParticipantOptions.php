<?php
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Twilio\Rest\Api\V2010\Account\Conference;

use Twilio\Options;
use Twilio\Values;


abstract class ParticipantOptions {
    /**
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application. 
    * @param string $statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. 
    * @param string[] $statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;. 
    * @param string $label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant. 
    * @param int $timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds. 
    * @param bool $record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. 
    * @param bool $muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;. 
    * @param string $beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;. 
    * @param bool $startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference. 
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. 
    * @param string $waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). 
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. 
    * @param bool $earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;. 
    * @param int $maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;. 
    * @param string $conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;. 
    * @param string $conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;. 
    * @param string $conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored. 
    * @param string $conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. 
    * @param string[] $conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;. 
    * @param string $recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;. 
    * @param string $recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes. 
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. 
    * @param string $sipAuthUsername The SIP username used for authentication. 
    * @param string $sipAuthPassword The SIP password for authentication. 
    * @param string $region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;. 
    * @param string $conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available. 
    * @param string $conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. 
    * @param string[] $recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;. 
    * @param string[] $conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60; 
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. 
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. 
    * @param string $jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;. 
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta) 
    * @param string $callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint. 
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta) 
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio. 
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration. 
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection). 
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds. 
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400. 
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200. 
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000. 
    * @param string $amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax. 
    * @param string $amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. 
    * @return CreateParticipantOptions Options builder
    */
    public static function create(string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,array  $statusCallbackEvent=Values::ARRAY_NONE,string  $label=Values::NONE,int  $timeout=Values::NONE,bool  $record=Values::NONE,bool  $muted=Values::NONE,string  $beep=Values::NONE,bool  $startConferenceOnEnter=Values::NONE,bool  $endConferenceOnExit=Values::NONE,string  $waitUrl=Values::NONE,string  $waitMethod=Values::NONE,bool  $earlyMedia=Values::NONE,int  $maxParticipants=Values::NONE,string  $conferenceRecord=Values::NONE,string  $conferenceTrim=Values::NONE,string  $conferenceStatusCallback=Values::NONE,string  $conferenceStatusCallbackMethod=Values::NONE,array  $conferenceStatusCallbackEvent=Values::ARRAY_NONE,string  $recordingChannels=Values::NONE,string  $recordingStatusCallback=Values::NONE,string  $recordingStatusCallbackMethod=Values::NONE,string  $sipAuthUsername=Values::NONE,string  $sipAuthPassword=Values::NONE,string  $region=Values::NONE,string  $conferenceRecordingStatusCallback=Values::NONE,string  $conferenceRecordingStatusCallbackMethod=Values::NONE,array  $recordingStatusCallbackEvent=Values::ARRAY_NONE,array  $conferenceRecordingStatusCallbackEvent=Values::ARRAY_NONE,bool  $coaching=Values::NONE,string  $callSidToCoach=Values::NONE,string  $jitterBufferSize=Values::NONE,string  $byoc=Values::NONE,string  $callerId=Values::NONE,string  $callReason=Values::NONE,string  $recordingTrack=Values::NONE,int  $timeLimit=Values::NONE,string  $machineDetection=Values::NONE,int  $machineDetectionTimeout=Values::NONE,int  $machineDetectionSpeechThreshold=Values::NONE,int  $machineDetectionSpeechEndThreshold=Values::NONE,int  $machineDetectionSilenceTimeout=Values::NONE,string  $amdStatusCallback=Values::NONE,string  $amdStatusCallbackMethod=Values::NONE): CreateParticipantOptions {
        return new CreateParticipantOptions($statusCallback,$statusCallbackMethod,$statusCallbackEvent,$label,$timeout,$record,$muted,$beep,$startConferenceOnEnter,$endConferenceOnExit,$waitUrl,$waitMethod,$earlyMedia,$maxParticipants,$conferenceRecord,$conferenceTrim,$conferenceStatusCallback,$conferenceStatusCallbackMethod,$conferenceStatusCallbackEvent,$recordingChannels,$recordingStatusCallback,$recordingStatusCallbackMethod,$sipAuthUsername,$sipAuthPassword,$region,$conferenceRecordingStatusCallback,$conferenceRecordingStatusCallbackMethod,$recordingStatusCallbackEvent,$conferenceRecordingStatusCallbackEvent,$coaching,$callSidToCoach,$jitterBufferSize,$byoc,$callerId,$callReason,$recordingTrack,$timeLimit,$machineDetection,$machineDetectionTimeout,$machineDetectionSpeechThreshold,$machineDetectionSpeechEndThreshold,$machineDetectionSilenceTimeout,$amdStatusCallback,$amdStatusCallbackMethod);
    }



    /**
    * @param bool $muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;. 
    * @param bool $hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. 
    * @param bool $coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. 
    * @return ReadParticipantOptions Options builder
    */
    public static function read(bool  $muted=Values::NONE,bool  $hold=Values::NONE,bool  $coaching=Values::NONE): ReadParticipantOptions {
        return new ReadParticipantOptions($muted,$hold,$coaching);
    }

    /**
    * @param bool $muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;. 
    * @param bool $hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference. 
    * @param string $holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. 
    * @param string $holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;. 
    * @param string $announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. 
    * @param string $announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;. 
    * @param string $waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic). 
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file. 
    * @param bool $beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;. 
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;. 
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined. 
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;. 
    * @return UpdateParticipantOptions Options builder
    */
    public static function update(bool  $muted=Values::NONE,bool  $hold=Values::NONE,string  $holdUrl=Values::NONE,string  $holdMethod=Values::NONE,string  $announceUrl=Values::NONE,string  $announceMethod=Values::NONE,string  $waitUrl=Values::NONE,string  $waitMethod=Values::NONE,bool  $beepOnExit=Values::NONE,bool  $endConferenceOnExit=Values::NONE,bool  $coaching=Values::NONE,string  $callSidToCoach=Values::NONE): UpdateParticipantOptions {
        return new UpdateParticipantOptions($muted,$hold,$holdUrl,$holdMethod,$announceUrl,$announceMethod,$waitUrl,$waitMethod,$beepOnExit,$endConferenceOnExit,$coaching,$callSidToCoach);
    }

}

class CreateParticipantOptions extends Options {
    /**
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application.
    * @param string $statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @param string[] $statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;.
    * @param string $label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    * @param int $timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    * @param bool $record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;.
    * @param bool $muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;.
    * @param string $beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;.
    * @param bool $startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;.
    * @param string $waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file.
    * @param bool $earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;.
    * @param int $maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;.
    * @param string $conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;.
    * @param string $conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;.
    * @param string $conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored.
    * @param string $conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @param string[] $conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;.
    * @param string $recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;.
    * @param string $recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes.
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @param string $sipAuthUsername The SIP username used for authentication.
    * @param string $sipAuthPassword The SIP password for authentication.
    * @param string $region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;.
    * @param string $conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available.
    * @param string $conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @param string[] $recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;.
    * @param string[] $conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined.
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;.
    * @param string $jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;.
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta)
    * @param string $callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta)
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio.
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds.
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    * @param string $amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax.
    * @param string $amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    */
    public function __construct(string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,array  $statusCallbackEvent=Values::ARRAY_NONE,string  $label=Values::NONE,int  $timeout=Values::NONE,bool  $record=Values::NONE,bool  $muted=Values::NONE,string  $beep=Values::NONE,bool  $startConferenceOnEnter=Values::NONE,bool  $endConferenceOnExit=Values::NONE,string  $waitUrl=Values::NONE,string  $waitMethod=Values::NONE,bool  $earlyMedia=Values::NONE,int  $maxParticipants=Values::NONE,string  $conferenceRecord=Values::NONE,string  $conferenceTrim=Values::NONE,string  $conferenceStatusCallback=Values::NONE,string  $conferenceStatusCallbackMethod=Values::NONE,array  $conferenceStatusCallbackEvent=Values::ARRAY_NONE,string  $recordingChannels=Values::NONE,string  $recordingStatusCallback=Values::NONE,string  $recordingStatusCallbackMethod=Values::NONE,string  $sipAuthUsername=Values::NONE,string  $sipAuthPassword=Values::NONE,string  $region=Values::NONE,string  $conferenceRecordingStatusCallback=Values::NONE,string  $conferenceRecordingStatusCallbackMethod=Values::NONE,array  $recordingStatusCallbackEvent=Values::ARRAY_NONE,array  $conferenceRecordingStatusCallbackEvent=Values::ARRAY_NONE,bool  $coaching=Values::NONE,string  $callSidToCoach=Values::NONE,string  $jitterBufferSize=Values::NONE,string  $byoc=Values::NONE,string  $callerId=Values::NONE,string  $callReason=Values::NONE,string  $recordingTrack=Values::NONE,int  $timeLimit=Values::NONE,string  $machineDetection=Values::NONE,int  $machineDetectionTimeout=Values::NONE,int  $machineDetectionSpeechThreshold=Values::NONE,int  $machineDetectionSpeechEndThreshold=Values::NONE,int  $machineDetectionSilenceTimeout=Values::NONE,string  $amdStatusCallback=Values::NONE,string  $amdStatusCallbackMethod=Values::NONE) {
        $this->options['statusCallback'] = $statusCallback;
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        $this->options['statusCallbackEvent'] = $statusCallbackEvent;
        $this->options['label'] = $label;
        $this->options['timeout'] = $timeout;
        $this->options['record'] = $record;
        $this->options['muted'] = $muted;
        $this->options['beep'] = $beep;
        $this->options['startConferenceOnEnter'] = $startConferenceOnEnter;
        $this->options['endConferenceOnExit'] = $endConferenceOnExit;
        $this->options['waitUrl'] = $waitUrl;
        $this->options['waitMethod'] = $waitMethod;
        $this->options['earlyMedia'] = $earlyMedia;
        $this->options['maxParticipants'] = $maxParticipants;
        $this->options['conferenceRecord'] = $conferenceRecord;
        $this->options['conferenceTrim'] = $conferenceTrim;
        $this->options['conferenceStatusCallback'] = $conferenceStatusCallback;
        $this->options['conferenceStatusCallbackMethod'] = $conferenceStatusCallbackMethod;
        $this->options['conferenceStatusCallbackEvent'] = $conferenceStatusCallbackEvent;
        $this->options['recordingChannels'] = $recordingChannels;
        $this->options['recordingStatusCallback'] = $recordingStatusCallback;
        $this->options['recordingStatusCallbackMethod'] = $recordingStatusCallbackMethod;
        $this->options['sipAuthUsername'] = $sipAuthUsername;
        $this->options['sipAuthPassword'] = $sipAuthPassword;
        $this->options['region'] = $region;
        $this->options['conferenceRecordingStatusCallback'] = $conferenceRecordingStatusCallback;
        $this->options['conferenceRecordingStatusCallbackMethod'] = $conferenceRecordingStatusCallbackMethod;
        $this->options['recordingStatusCallbackEvent'] = $recordingStatusCallbackEvent;
        $this->options['conferenceRecordingStatusCallbackEvent'] = $conferenceRecordingStatusCallbackEvent;
        $this->options['coaching'] = $coaching;
        $this->options['callSidToCoach'] = $callSidToCoach;
        $this->options['jitterBufferSize'] = $jitterBufferSize;
        $this->options['byoc'] = $byoc;
        $this->options['callerId'] = $callerId;
        $this->options['callReason'] = $callReason;
        $this->options['recordingTrack'] = $recordingTrack;
        $this->options['timeLimit'] = $timeLimit;
        $this->options['machineDetection'] = $machineDetection;
        $this->options['machineDetectionTimeout'] = $machineDetectionTimeout;
        $this->options['machineDetectionSpeechThreshold'] = $machineDetectionSpeechThreshold;
        $this->options['machineDetectionSpeechEndThreshold'] = $machineDetectionSpeechEndThreshold;
        $this->options['machineDetectionSilenceTimeout'] = $machineDetectionSilenceTimeout;
        $this->options['amdStatusCallback'] = $amdStatusCallback;
        $this->options['amdStatusCallbackMethod'] = $amdStatusCallbackMethod;
    }

    /**
    * @param string $statusCallback The URL we should call using the &#x60;status_callback_method&#x60; to send status information to your application.
    * @return $this Fluent Builder
    */
    public function setStatusCallback(string $statusCallback): self {
        $this->options['statusCallback'] = $statusCallback;
        return $this;
    }
    /**
    * @param string $statusCallbackMethod The HTTP method we should use to call &#x60;status_callback&#x60;. Can be: &#x60;GET&#x60; and &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackMethod(string $statusCallbackMethod): self {
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        return $this;
    }
    /**
    * @param string[] $statusCallbackEvent The conference state changes that should generate a call to &#x60;status_callback&#x60;. Can be: &#x60;initiated&#x60;, &#x60;ringing&#x60;, &#x60;answered&#x60;, and &#x60;completed&#x60;. Separate multiple values with a space. The default value is &#x60;completed&#x60;.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackEvent(array $statusCallbackEvent): self {
        $this->options['statusCallbackEvent'] = $statusCallbackEvent;
        return $this;
    }
    /**
    * @param string $label A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    * @return $this Fluent Builder
    */
    public function setLabel(string $label): self {
        $this->options['label'] = $label;
        return $this;
    }
    /**
    * @param int $timeout The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between &#x60;5&#x60; and &#x60;600&#x60;, inclusive. The default value is &#x60;60&#x60;. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    * @return $this Fluent Builder
    */
    public function setTimeout(int $timeout): self {
        $this->options['timeout'] = $timeout;
        return $this;
    }
    /**
    * @param bool $record Whether to record the participant and their conferences, including the time between conferences. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setRecord(bool $record): self {
        $this->options['record'] = $record;
        return $this;
    }
    /**
    * @param bool $muted Whether the agent is muted in the conference. Can be &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setMuted(bool $muted): self {
        $this->options['muted'] = $muted;
        return $this;
    }
    /**
    * @param string $beep Whether to play a notification beep to the conference when the participant joins. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;onEnter&#x60;, or &#x60;onExit&#x60;. The default value is &#x60;true&#x60;.
    * @return $this Fluent Builder
    */
    public function setBeep(string $beep): self {
        $this->options['beep'] = $beep;
        return $this;
    }
    /**
    * @param bool $startConferenceOnEnter Whether to start the conference when the participant joins, if it has not already started. Can be: &#x60;true&#x60; or &#x60;false&#x60; and the default is &#x60;true&#x60;. If &#x60;false&#x60; and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    * @return $this Fluent Builder
    */
    public function setStartConferenceOnEnter(bool $startConferenceOnEnter): self {
        $this->options['startConferenceOnEnter'] = $startConferenceOnEnter;
        return $this;
    }
    /**
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setEndConferenceOnExit(bool $endConferenceOnExit): self {
        $this->options['endConferenceOnExit'] = $endConferenceOnExit;
        return $this;
    }
    /**
    * @param string $waitUrl The URL we should call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    * @return $this Fluent Builder
    */
    public function setWaitUrl(string $waitUrl): self {
        $this->options['waitUrl'] = $waitUrl;
        return $this;
    }
    /**
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file.
    * @return $this Fluent Builder
    */
    public function setWaitMethod(string $waitMethod): self {
        $this->options['waitMethod'] = $waitMethod;
        return $this;
    }
    /**
    * @param bool $earlyMedia Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;true&#x60;.
    * @return $this Fluent Builder
    */
    public function setEarlyMedia(bool $earlyMedia): self {
        $this->options['earlyMedia'] = $earlyMedia;
        return $this;
    }
    /**
    * @param int $maxParticipants The maximum number of participants in the conference. Can be a positive integer from &#x60;2&#x60; to &#x60;250&#x60;. The default value is &#x60;250&#x60;.
    * @return $this Fluent Builder
    */
    public function setMaxParticipants(int $maxParticipants): self {
        $this->options['maxParticipants'] = $maxParticipants;
        return $this;
    }
    /**
    * @param string $conferenceRecord Whether to record the conference the participant is joining. Can be: &#x60;true&#x60;, &#x60;false&#x60;, &#x60;record-from-start&#x60;, and &#x60;do-not-record&#x60;. The default value is &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setConferenceRecord(string $conferenceRecord): self {
        $this->options['conferenceRecord'] = $conferenceRecord;
        return $this;
    }
    /**
    * @param string $conferenceTrim Whether to trim leading and trailing silence from your recorded conference audio files. Can be: &#x60;trim-silence&#x60; or &#x60;do-not-trim&#x60; and defaults to &#x60;trim-silence&#x60;.
    * @return $this Fluent Builder
    */
    public function setConferenceTrim(string $conferenceTrim): self {
        $this->options['conferenceTrim'] = $conferenceTrim;
        return $this;
    }
    /**
    * @param string $conferenceStatusCallback The URL we should call using the &#x60;conference_status_callback_method&#x60; when the conference events in &#x60;conference_status_callback_event&#x60; occur. Only the value set by the first participant to join the conference is used. Subsequent &#x60;conference_status_callback&#x60; values are ignored.
    * @return $this Fluent Builder
    */
    public function setConferenceStatusCallback(string $conferenceStatusCallback): self {
        $this->options['conferenceStatusCallback'] = $conferenceStatusCallback;
        return $this;
    }
    /**
    * @param string $conferenceStatusCallbackMethod The HTTP method we should use to call &#x60;conference_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setConferenceStatusCallbackMethod(string $conferenceStatusCallbackMethod): self {
        $this->options['conferenceStatusCallbackMethod'] = $conferenceStatusCallbackMethod;
        return $this;
    }
    /**
    * @param string[] $conferenceStatusCallbackEvent The conference state changes that should generate a call to &#x60;conference_status_callback&#x60;. Can be: &#x60;start&#x60;, &#x60;end&#x60;, &#x60;join&#x60;, &#x60;leave&#x60;, &#x60;mute&#x60;, &#x60;hold&#x60;, &#x60;modify&#x60;, &#x60;speaker&#x60;, and &#x60;announcement&#x60;. Separate multiple values with a space. Defaults to &#x60;start end&#x60;.
    * @return $this Fluent Builder
    */
    public function setConferenceStatusCallbackEvent(array $conferenceStatusCallbackEvent): self {
        $this->options['conferenceStatusCallbackEvent'] = $conferenceStatusCallbackEvent;
        return $this;
    }
    /**
    * @param string $recordingChannels The recording channels for the final recording. Can be: &#x60;mono&#x60; or &#x60;dual&#x60; and the default is &#x60;mono&#x60;.
    * @return $this Fluent Builder
    */
    public function setRecordingChannels(string $recordingChannels): self {
        $this->options['recordingChannels'] = $recordingChannels;
        return $this;
    }
    /**
    * @param string $recordingStatusCallback The URL that we should call using the &#x60;recording_status_callback_method&#x60; when the recording status changes.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallback(string $recordingStatusCallback): self {
        $this->options['recordingStatusCallback'] = $recordingStatusCallback;
        return $this;
    }
    /**
    * @param string $recordingStatusCallbackMethod The HTTP method we should use when we call &#x60;recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallbackMethod(string $recordingStatusCallbackMethod): self {
        $this->options['recordingStatusCallbackMethod'] = $recordingStatusCallbackMethod;
        return $this;
    }
    /**
    * @param string $sipAuthUsername The SIP username used for authentication.
    * @return $this Fluent Builder
    */
    public function setSipAuthUsername(string $sipAuthUsername): self {
        $this->options['sipAuthUsername'] = $sipAuthUsername;
        return $this;
    }
    /**
    * @param string $sipAuthPassword The SIP password for authentication.
    * @return $this Fluent Builder
    */
    public function setSipAuthPassword(string $sipAuthPassword): self {
        $this->options['sipAuthPassword'] = $sipAuthPassword;
        return $this;
    }
    /**
    * @param string $region The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:&#x60;us1&#x60;, &#x60;ie1&#x60;, &#x60;de1&#x60;, &#x60;sg1&#x60;, &#x60;br1&#x60;, &#x60;au1&#x60;, or &#x60;jp1&#x60;.
    * @return $this Fluent Builder
    */
    public function setRegion(string $region): self {
        $this->options['region'] = $region;
        return $this;
    }
    /**
    * @param string $conferenceRecordingStatusCallback The URL we should call using the &#x60;conference_recording_status_callback_method&#x60; when the conference recording is available.
    * @return $this Fluent Builder
    */
    public function setConferenceRecordingStatusCallback(string $conferenceRecordingStatusCallback): self {
        $this->options['conferenceRecordingStatusCallback'] = $conferenceRecordingStatusCallback;
        return $this;
    }
    /**
    * @param string $conferenceRecordingStatusCallbackMethod The HTTP method we should use to call &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setConferenceRecordingStatusCallbackMethod(string $conferenceRecordingStatusCallbackMethod): self {
        $this->options['conferenceRecordingStatusCallbackMethod'] = $conferenceRecordingStatusCallbackMethod;
        return $this;
    }
    /**
    * @param string[] $recordingStatusCallbackEvent The recording state changes that should generate a call to &#x60;recording_status_callback&#x60;. Can be: &#x60;started&#x60;, &#x60;in-progress&#x60;, &#x60;paused&#x60;, &#x60;resumed&#x60;, &#x60;stopped&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;.
    * @return $this Fluent Builder
    */
    public function setRecordingStatusCallbackEvent(array $recordingStatusCallbackEvent): self {
        $this->options['recordingStatusCallbackEvent'] = $recordingStatusCallbackEvent;
        return $this;
    }
    /**
    * @param string[] $conferenceRecordingStatusCallbackEvent The conference recording state changes that generate a call to &#x60;conference_recording_status_callback&#x60;. Can be: &#x60;in-progress&#x60;, &#x60;completed&#x60;, &#x60;failed&#x60;, and &#x60;absent&#x60;. Separate multiple values with a space, ex: &#x60;&#39;in-progress completed failed&#39;&#x60;
    * @return $this Fluent Builder
    */
    public function setConferenceRecordingStatusCallbackEvent(array $conferenceRecordingStatusCallbackEvent): self {
        $this->options['conferenceRecordingStatusCallbackEvent'] = $conferenceRecordingStatusCallbackEvent;
        return $this;
    }
    /**
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined.
    * @return $this Fluent Builder
    */
    public function setCoaching(bool $coaching): self {
        $this->options['coaching'] = $coaching;
        return $this;
    }
    /**
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;.
    * @return $this Fluent Builder
    */
    public function setCallSidToCoach(string $callSidToCoach): self {
        $this->options['callSidToCoach'] = $callSidToCoach;
        return $this;
    }
    /**
    * @param string $jitterBufferSize Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant&#39;s audio is mixed into the conference. Can be: &#x60;off&#x60;, &#x60;small&#x60;, &#x60;medium&#x60;, and &#x60;large&#x60;. Default to &#x60;large&#x60;.
    * @return $this Fluent Builder
    */
    public function setJitterBufferSize(string $jitterBufferSize): self {
        $this->options['jitterBufferSize'] = $jitterBufferSize;
        return $this;
    }
    /**
    * @param string $byoc The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that &#x60;byoc&#x60; is only meaningful when &#x60;to&#x60; is a phone number; it will otherwise be ignored. (Beta)
    * @return $this Fluent Builder
    */
    public function setByoc(string $byoc): self {
        $this->options['byoc'] = $byoc;
        return $this;
    }
    /**
    * @param string $callerId The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted &#x60;client:name&#x60;. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the &#x60;to&#x60; parameter is a phone number, &#x60;callerId&#x60; must also be a phone number. If &#x60;to&#x60; is sip address, this value of &#x60;callerId&#x60; should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    * @return $this Fluent Builder
    */
    public function setCallerId(string $callerId): self {
        $this->options['callerId'] = $callerId;
        return $this;
    }
    /**
    * @param string $callReason The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party&#39;s phone. (Branded Calls Beta)
    * @return $this Fluent Builder
    */
    public function setCallReason(string $callReason): self {
        $this->options['callReason'] = $callReason;
        return $this;
    }
    /**
    * @param string $recordingTrack The audio track to record for the call. Can be: &#x60;inbound&#x60;, &#x60;outbound&#x60; or &#x60;both&#x60;. The default is &#x60;both&#x60;. &#x60;inbound&#x60; records the audio that is received by Twilio. &#x60;outbound&#x60; records the audio that is sent from Twilio. &#x60;both&#x60; records the audio that is received and sent by Twilio.
    * @return $this Fluent Builder
    */
    public function setRecordingTrack(string $recordingTrack): self {
        $this->options['recordingTrack'] = $recordingTrack;
        return $this;
    }
    /**
    * @param int $timeLimit The maximum duration of the call in seconds. Constraints depend on account and configuration.
    * @return $this Fluent Builder
    */
    public function setTimeLimit(int $timeLimit): self {
        $this->options['timeLimit'] = $timeLimit;
        return $this;
    }
    /**
    * @param string $machineDetection Whether to detect if a human, answering machine, or fax has picked up the call. Can be: &#x60;Enable&#x60; or &#x60;DetectMessageEnd&#x60;. Use &#x60;Enable&#x60; if you would like us to return &#x60;AnsweredBy&#x60; as soon as the called party is identified. Use &#x60;DetectMessageEnd&#x60;, if you would like to leave a message on an answering machine. If &#x60;send_digits&#x60; is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    * @return $this Fluent Builder
    */
    public function setMachineDetection(string $machineDetection): self {
        $this->options['machineDetection'] = $machineDetection;
        return $this;
    }
    /**
    * @param int $machineDetectionTimeout The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with &#x60;AnsweredBy&#x60; of &#x60;unknown&#x60;. The default timeout is 30 seconds.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionTimeout(int $machineDetectionTimeout): self {
        $this->options['machineDetectionTimeout'] = $machineDetectionTimeout;
        return $this;
    }
    /**
    * @param int $machineDetectionSpeechThreshold The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSpeechThreshold(int $machineDetectionSpeechThreshold): self {
        $this->options['machineDetectionSpeechThreshold'] = $machineDetectionSpeechThreshold;
        return $this;
    }
    /**
    * @param int $machineDetectionSpeechEndThreshold The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSpeechEndThreshold(int $machineDetectionSpeechEndThreshold): self {
        $this->options['machineDetectionSpeechEndThreshold'] = $machineDetectionSpeechEndThreshold;
        return $this;
    }
    /**
    * @param int $machineDetectionSilenceTimeout The number of milliseconds of initial silence after which an &#x60;unknown&#x60; AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    * @return $this Fluent Builder
    */
    public function setMachineDetectionSilenceTimeout(int $machineDetectionSilenceTimeout): self {
        $this->options['machineDetectionSilenceTimeout'] = $machineDetectionSilenceTimeout;
        return $this;
    }
    /**
    * @param string $amdStatusCallback The URL that we should call using the &#x60;amd_status_callback_method&#x60; to notify customer application whether the call was answered by human, machine or fax.
    * @return $this Fluent Builder
    */
    public function setAmdStatusCallback(string $amdStatusCallback): self {
        $this->options['amdStatusCallback'] = $amdStatusCallback;
        return $this;
    }
    /**
    * @param string $amdStatusCallbackMethod The HTTP method we should use when calling the &#x60;amd_status_callback&#x60; URL. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setAmdStatusCallbackMethod(string $amdStatusCallbackMethod): self {
        $this->options['amdStatusCallbackMethod'] = $amdStatusCallbackMethod;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.CreateParticipantOptions ' . $options . ']';
    }
}



class ReadParticipantOptions extends Options {
    /**
    * @param bool $muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @param bool $hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @param bool $coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    */
    public function __construct(bool  $muted=Values::NONE,bool  $hold=Values::NONE,bool  $coaching=Values::NONE) {
        $this->options['muted'] = $muted;
        $this->options['hold'] = $hold;
        $this->options['coaching'] = $coaching;
    }

    /**
    * @param bool $muted Whether to return only participants that are muted. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setMuted(bool $muted): self {
        $this->options['muted'] = $muted;
        return $this;
    }
    /**
    * @param bool $hold Whether to return only participants that are on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setHold(bool $hold): self {
        $this->options['hold'] = $hold;
        return $this;
    }
    /**
    * @param bool $coaching Whether to return only participants who are coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setCoaching(bool $coaching): self {
        $this->options['coaching'] = $coaching;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.ReadParticipantOptions ' . $options . ']';
    }
}

class UpdateParticipantOptions extends Options {
    /**
    * @param bool $muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;.
    * @param bool $hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference.
    * @param string $holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs.
    * @param string $holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;.
    * @param string $announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs.
    * @param string $announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @param string $waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file.
    * @param bool $beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;.
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined.
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;.
    */
    public function __construct(bool  $muted=Values::NONE,bool  $hold=Values::NONE,string  $holdUrl=Values::NONE,string  $holdMethod=Values::NONE,string  $announceUrl=Values::NONE,string  $announceMethod=Values::NONE,string  $waitUrl=Values::NONE,string  $waitMethod=Values::NONE,bool  $beepOnExit=Values::NONE,bool  $endConferenceOnExit=Values::NONE,bool  $coaching=Values::NONE,string  $callSidToCoach=Values::NONE) {
        $this->options['muted'] = $muted;
        $this->options['hold'] = $hold;
        $this->options['holdUrl'] = $holdUrl;
        $this->options['holdMethod'] = $holdMethod;
        $this->options['announceUrl'] = $announceUrl;
        $this->options['announceMethod'] = $announceMethod;
        $this->options['waitUrl'] = $waitUrl;
        $this->options['waitMethod'] = $waitMethod;
        $this->options['beepOnExit'] = $beepOnExit;
        $this->options['endConferenceOnExit'] = $endConferenceOnExit;
        $this->options['coaching'] = $coaching;
        $this->options['callSidToCoach'] = $callSidToCoach;
    }

    /**
    * @param bool $muted Whether the participant should be muted. Can be &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; will mute the participant, and &#x60;false&#x60; will un-mute them. Anything value other than &#x60;true&#x60; or &#x60;false&#x60; is interpreted as &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setMuted(bool $muted): self {
        $this->options['muted'] = $muted;
        return $this;
    }
    /**
    * @param bool $hold Whether the participant should be on hold. Can be: &#x60;true&#x60; or &#x60;false&#x60;. &#x60;true&#x60; puts the participant on hold, and &#x60;false&#x60; lets them rejoin the conference.
    * @return $this Fluent Builder
    */
    public function setHold(bool $hold): self {
        $this->options['hold'] = $hold;
        return $this;
    }
    /**
    * @param string $holdUrl The URL we call using the &#x60;hold_method&#x60; for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs.
    * @return $this Fluent Builder
    */
    public function setHoldUrl(string $holdUrl): self {
        $this->options['holdUrl'] = $holdUrl;
        return $this;
    }
    /**
    * @param string $holdMethod The HTTP method we should use to call &#x60;hold_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;GET&#x60;.
    * @return $this Fluent Builder
    */
    public function setHoldMethod(string $holdMethod): self {
        $this->options['holdMethod'] = $holdMethod;
        return $this;
    }
    /**
    * @param string $announceUrl The URL we call using the &#x60;announce_method&#x60; for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs.
    * @return $this Fluent Builder
    */
    public function setAnnounceUrl(string $announceUrl): self {
        $this->options['announceUrl'] = $announceUrl;
        return $this;
    }
    /**
    * @param string $announceMethod The HTTP method we should use to call &#x60;announce_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and defaults to &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setAnnounceMethod(string $announceMethod): self {
        $this->options['announceMethod'] = $announceMethod;
        return $this;
    }
    /**
    * @param string $waitUrl The URL we call using the &#x60;wait_method&#x60; for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains &#x60;&lt;Play&gt;&#x60;, &#x60;&lt;Say&gt;&#x60;, &#x60;&lt;Pause&gt;&#x60;, or &#x60;&lt;Redirect&gt;&#x60; verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    * @return $this Fluent Builder
    */
    public function setWaitUrl(string $waitUrl): self {
        $this->options['waitUrl'] = $waitUrl;
        return $this;
    }
    /**
    * @param string $waitMethod The HTTP method we should use to call &#x60;wait_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60; and the default is &#x60;POST&#x60;. When using a static audio file, this should be &#x60;GET&#x60; so that we can cache the file.
    * @return $this Fluent Builder
    */
    public function setWaitMethod(string $waitMethod): self {
        $this->options['waitMethod'] = $waitMethod;
        return $this;
    }
    /**
    * @param bool $beepOnExit Whether to play a notification beep to the conference when the participant exits. Can be: &#x60;true&#x60; or &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setBeepOnExit(bool $beepOnExit): self {
        $this->options['beepOnExit'] = $beepOnExit;
        return $this;
    }
    /**
    * @param bool $endConferenceOnExit Whether to end the conference when the participant leaves. Can be: &#x60;true&#x60; or &#x60;false&#x60; and defaults to &#x60;false&#x60;.
    * @return $this Fluent Builder
    */
    public function setEndConferenceOnExit(bool $endConferenceOnExit): self {
        $this->options['endConferenceOnExit'] = $endConferenceOnExit;
        return $this;
    }
    /**
    * @param bool $coaching Whether the participant is coaching another call. Can be: &#x60;true&#x60; or &#x60;false&#x60;. If not present, defaults to &#x60;false&#x60; unless &#x60;call_sid_to_coach&#x60; is defined. If &#x60;true&#x60;, &#x60;call_sid_to_coach&#x60; must be defined.
    * @return $this Fluent Builder
    */
    public function setCoaching(bool $coaching): self {
        $this->options['coaching'] = $coaching;
        return $this;
    }
    /**
    * @param string $callSidToCoach The SID of the participant who is being &#x60;coached&#x60;. The participant being coached is the only participant who can hear the participant who is &#x60;coaching&#x60;.
    * @return $this Fluent Builder
    */
    public function setCallSidToCoach(string $callSidToCoach): self {
        $this->options['callSidToCoach'] = $callSidToCoach;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.UpdateParticipantOptions ' . $options . ']';
    }
}

