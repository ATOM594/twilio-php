<?php
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Api
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Twilio\Rest\Api\V2010\Account;

use Twilio\Options;
use Twilio\Values;


abstract class NotificationOptions {

    /**
    * @param int $log Only read notifications of the specified log level. Can be:  &#x60;0&#x60; to read only ERROR notifications or &#x60;1&#x60; to read only WARNING notifications. By default, all notifications are read. 
    * @param \DateTime $messageDate Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date. 
    * @param \DateTime $messageDateBefore Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date. 
    * @param \DateTime $messageDateAfter Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date. 
    * @return ReadNotificationOptions Options builder
    */
    public static function read(int  $log=Values::NONE,\DateTime  $messageDate=Values::NONE,\DateTime  $messageDateBefore=Values::NONE,\DateTime  $messageDateAfter=Values::NONE): ReadNotificationOptions {
        return new ReadNotificationOptions($log,$messageDate,$messageDateBefore,$messageDateAfter);
    }

}


class ReadNotificationOptions extends Options {
    /**
    * @param int $log Only read notifications of the specified log level. Can be:  &#x60;0&#x60; to read only ERROR notifications or &#x60;1&#x60; to read only WARNING notifications. By default, all notifications are read.
    * @param \DateTime $messageDate Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    * @param \DateTime $messageDateBefore Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    * @param \DateTime $messageDateAfter Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    */
    public function __construct(int  $log=Values::NONE,\DateTime  $messageDate=Values::NONE,\DateTime  $messageDateBefore=Values::NONE,\DateTime  $messageDateAfter=Values::NONE) {
        $this->options['log'] = $log;
        $this->options['messageDate'] = $messageDate;
        $this->options['messageDateBefore'] = $messageDateBefore;
        $this->options['messageDateAfter'] = $messageDateAfter;
    }

    /**
    * @param int $log Only read notifications of the specified log level. Can be:  &#x60;0&#x60; to read only ERROR notifications or &#x60;1&#x60; to read only WARNING notifications. By default, all notifications are read.
    * @return $this Fluent Builder
    */
    public function setLog(int $log): self {
        $this->options['log'] = $log;
        return $this;
    }
    /**
    * @param \DateTime $messageDate Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    * @return $this Fluent Builder
    */
    public function setMessageDate(\DateTime $messageDate): self {
        $this->options['messageDate'] = $messageDate;
        return $this;
    }
    /**
    * @param \DateTime $messageDateBefore Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    * @return $this Fluent Builder
    */
    public function setMessageDateBefore(\DateTime $messageDateBefore): self {
        $this->options['messageDateBefore'] = $messageDateBefore;
        return $this;
    }
    /**
    * @param \DateTime $messageDateAfter Only show notifications for the specified date, formatted as &#x60;YYYY-MM-DD&#x60;. You can also specify an inequality, such as &#x60;&lt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or before midnight on a date, or &#x60;&gt;&#x3D;YYYY-MM-DD&#x60; for messages logged at or after midnight on a date.
    * @return $this Fluent Builder
    */
    public function setMessageDateAfter(\DateTime $messageDateAfter): self {
        $this->options['messageDateAfter'] = $messageDateAfter;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Api.V2010.ReadNotificationOptions ' . $options . ']';
    }
}

