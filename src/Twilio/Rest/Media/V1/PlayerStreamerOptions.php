<?php
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Media
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Twilio\Rest\Media\V1;

use Twilio\Options;
use Twilio\Values;


abstract class PlayerStreamerOptions {
    /**
    * @param bool $video Specifies whether the PlayerStreamer is configured to stream video. Defaults to &#x60;true&#x60;. 
    * @param string $statusCallback The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details. 
    * @param string $statusCallbackMethod The HTTP method Twilio should use to call the &#x60;status_callback&#x60; URL. Can be &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;. 
    * @param int $maxDuration The maximum time, in seconds, that the PlayerStreamer is active (&#x60;created&#x60; or &#x60;started&#x60;) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming. 
    * @return CreatePlayerStreamerOptions Options builder
    */
    public static function create(bool  $video=Values::NONE,string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,int  $maxDuration=Values::NONE): CreatePlayerStreamerOptions {
        return new CreatePlayerStreamerOptions($video,$statusCallback,$statusCallbackMethod,$maxDuration);
    }


    /**
    * @param string $order The sort order of the list by &#x60;date_created&#x60;. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) with &#x60;desc&#x60; as the default. 
    * @param string $status Status to filter by, with possible values &#x60;created&#x60;, &#x60;started&#x60;, &#x60;ended&#x60;, or &#x60;failed&#x60;. 
    * @return ReadPlayerStreamerOptions Options builder
    */
    public static function read(string  $order=Values::NONE,string  $status=Values::NONE): ReadPlayerStreamerOptions {
        return new ReadPlayerStreamerOptions($order,$status);
    }


}

class CreatePlayerStreamerOptions extends Options {
    /**
    * @param bool $video Specifies whether the PlayerStreamer is configured to stream video. Defaults to &#x60;true&#x60;.
    * @param string $statusCallback The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
    * @param string $statusCallbackMethod The HTTP method Twilio should use to call the &#x60;status_callback&#x60; URL. Can be &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;.
    * @param int $maxDuration The maximum time, in seconds, that the PlayerStreamer is active (&#x60;created&#x60; or &#x60;started&#x60;) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
    */
    public function __construct(bool  $video=Values::NONE,string  $statusCallback=Values::NONE,string  $statusCallbackMethod=Values::NONE,int  $maxDuration=Values::NONE) {
        $this->options['video'] = $video;
        $this->options['statusCallback'] = $statusCallback;
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        $this->options['maxDuration'] = $maxDuration;
    }

    /**
    * @param bool $video Specifies whether the PlayerStreamer is configured to stream video. Defaults to &#x60;true&#x60;.
    * @return $this Fluent Builder
    */
    public function setVideo(bool $video): self {
        $this->options['video'] = $video;
        return $this;
    }
    /**
    * @param string $statusCallback The URL to which Twilio will send asynchronous webhook requests for every PlayerStreamer event. See [Status Callbacks](/docs/live/status-callbacks) for more details.
    * @return $this Fluent Builder
    */
    public function setStatusCallback(string $statusCallback): self {
        $this->options['statusCallback'] = $statusCallback;
        return $this;
    }
    /**
    * @param string $statusCallbackMethod The HTTP method Twilio should use to call the &#x60;status_callback&#x60; URL. Can be &#x60;POST&#x60; or &#x60;GET&#x60; and the default is &#x60;POST&#x60;.
    * @return $this Fluent Builder
    */
    public function setStatusCallbackMethod(string $statusCallbackMethod): self {
        $this->options['statusCallbackMethod'] = $statusCallbackMethod;
        return $this;
    }
    /**
    * @param int $maxDuration The maximum time, in seconds, that the PlayerStreamer is active (&#x60;created&#x60; or &#x60;started&#x60;) before automatically ends. The default value is 300 seconds, and the maximum value is 90000 seconds. Once this maximum duration is reached, Twilio will end the PlayerStreamer, regardless of whether media is still streaming.
    * @return $this Fluent Builder
    */
    public function setMaxDuration(int $maxDuration): self {
        $this->options['maxDuration'] = $maxDuration;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Media.V1.CreatePlayerStreamerOptions ' . $options . ']';
    }
}


class ReadPlayerStreamerOptions extends Options {
    /**
    * @param string $order The sort order of the list by &#x60;date_created&#x60;. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) with &#x60;desc&#x60; as the default.
    * @param string $status Status to filter by, with possible values &#x60;created&#x60;, &#x60;started&#x60;, &#x60;ended&#x60;, or &#x60;failed&#x60;.
    */
    public function __construct(string  $order=Values::NONE,string  $status=Values::NONE) {
        $this->options['order'] = $order;
        $this->options['status'] = $status;
    }

    /**
    * @param string $order The sort order of the list by &#x60;date_created&#x60;. Can be: &#x60;asc&#x60; (ascending) or &#x60;desc&#x60; (descending) with &#x60;desc&#x60; as the default.
    * @return $this Fluent Builder
    */
    public function setOrder(string $order): self {
        $this->options['order'] = $order;
        return $this;
    }
    /**
    * @param string $status Status to filter by, with possible values &#x60;created&#x60;, &#x60;started&#x60;, &#x60;ended&#x60;, or &#x60;failed&#x60;.
    * @return $this Fluent Builder
    */
    public function setStatus(string $status): self {
        $this->options['status'] = $status;
        return $this;
    }

    /**
    * Provide a friendly representation
    *
    * @return string Machine friendly representation
    */
    public function __toString(): string {
        $options = \http_build_query(Values::of($this->options), '', ' ');
        return '[Twilio.Media.V1.ReadPlayerStreamerOptions ' . $options . ']';
    }
}


